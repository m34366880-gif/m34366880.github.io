"""
Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ NFT –ø–æ–¥–∞—Ä–∫–æ–≤
"""
import asyncio
import logging
from datetime import datetime
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings
from database import async_session_maker, User, NFTGift, NFTPurchase
import hashlib
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class NFTGiftBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º NFT –ø–æ–¥–∞—Ä–∫–æ–≤"""
    
    def __init__(self):
        self.application = None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            db_user = result.scalar_one_or_none()
            
            if not db_user:
                db_user = User(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                session.add(db_user)
                await session.commit()
        
        keyboard = [
            [InlineKeyboardButton("üéÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="view_gifts")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏", callback_data="my_gifts")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "üéÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Gift Shop!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é NFT –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ NFT\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º –≤ Telegram\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def view_gifts_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ NFT –ø–æ–¥–∞—Ä–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        async with async_session_maker() as session:
            result = await session.execute(
                select(NFTGift).where(NFTGift.is_active == True).order_by(NFTGift.id)
            )
            gifts = result.scalars().all()
        
        if not gifts:
            await query.edit_message_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
        context.user_data['current_gift_index'] = 0
        context.user_data['gifts'] = [g.id for g in gifts]
        await self.show_gift(query, context, gifts[0])
    
    async def show_gift(self, query, context: ContextTypes.DEFAULT_TYPE, gift: NFTGift):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π NFT –ø–æ–¥–∞—Ä–æ–∫"""
        gift_text = (
            f"üéÅ <b>{gift.title}</b>\n\n"
            f"{gift.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {gift.price} TON\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{gift.id}")],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_gift"),
                InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_gift")
            ],
            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF
            if gift.file_id:
                await query.message.reply_animation(
                    animation=gift.file_id,
                    caption=gift_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await query.message.reply_animation(
                    animation=gift.gif_url,
                    caption=gift_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GIF: {e}")
            await query.edit_message_text(gift_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def navigate_gifts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–æ–¥–∞—Ä–∫–∞–º"""
        query = update.callback_query
        await query.answer()
        
        direction = query.data
        current_index = context.user_data.get('current_gift_index', 0)
        gift_ids = context.user_data.get('gifts', [])
        
        if not gift_ids:
            await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤")
            return
        
        if direction == "next_gift":
            current_index = (current_index + 1) % len(gift_ids)
        elif direction == "prev_gift":
            current_index = (current_index - 1) % len(gift_ids)
        
        context.user_data['current_gift_index'] = current_index
        
        async with async_session_maker() as session:
            result = await session.execute(
                select(NFTGift).where(NFTGift.id == gift_ids[current_index])
            )
            gift = result.scalar_one_or_none()
        
        if gift:
            await self.show_gift(query, context, gift)
    
    async def buy_gift(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫—É–ø–∫–∞ NFT –ø–æ–¥–∞—Ä–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        gift_id = int(query.data.split("_")[1])
        user = query.from_user
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
            result = await session.execute(
                select(NFTGift).where(NFTGift.id == gift_id)
            )
            gift = result.scalar_one_or_none()
            
            if not gift:
                await query.edit_message_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            db_user = result.scalar_one_or_none()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É
            purchase = NFTPurchase(
                user_id=db_user.id,
                nft_gift_id=gift.id,
                status="completed",
                transaction_hash=self.generate_transaction_hash(user.id, gift.id)
            )
            session.add(purchase)
            await session.commit()
        
        keyboard = [
            [InlineKeyboardButton("üéÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"send_{purchase.id}")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏", callback_data="my_gifts")],
            [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        success_text = (
            f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ NFT –ø–æ–¥–∞—Ä–æ–∫:\n"
            f"üéÅ <b>{gift.title}</b>\n\n"
            f"üí∞ –¶–µ–Ω–∞: {gift.price} TON\n"
            f"üîó Transaction: <code>{purchase.transaction_hash[:16]}...</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –¥—Ä—É–≥—É!"
        )
        
        await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def my_gifts_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        
        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user.id)
            )
            db_user = result.scalar_one_or_none()
            
            if not db_user:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(NFTPurchase).where(
                    NFTPurchase.user_id == db_user.id,
                    NFTPurchase.status != "sent"
                ).order_by(NFTPurchase.created_at.desc())
            )
            purchases = result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            result = await session.execute(
                select(NFTPurchase).where(
                    NFTPurchase.recipient_telegram_id == user.id,
                    NFTPurchase.status == "sent"
                ).order_by(NFTPurchase.sent_at.desc())
            )
            received = result.scalars().all()
        
        text = f"üì¶ <b>–í–∞—à–∏ NFT –ø–æ–¥–∞—Ä–∫–∏</b>\n\n"
        
        if purchases:
            text += "üõçÔ∏è <b>–ö—É–ø–ª–µ–Ω–Ω—ã–µ:</b>\n"
            for p in purchases:
                async with async_session_maker() as session:
                    result = await session.execute(
                        select(NFTGift).where(NFTGift.id == p.nft_gift_id)
                    )
                    gift = result.scalar_one_or_none()
                    if gift:
                        text += f"‚Ä¢ {gift.title}\n"
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤\n\n"
        
        if received:
            text += "\nüéÅ <b>–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ:</b>\n"
            for p in received:
                async with async_session_maker() as session:
                    result = await session.execute(
                        select(NFTGift).where(NFTGift.id == p.nft_gift_id)
                    )
                    gift = result.scalar_one_or_none()
                    if gift:
                        text += f"‚Ä¢ {gift.title}\n"
        
        keyboard = [[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def send_gift_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        purchase_id = int(query.data.split("_")[1])
        context.user_data['sending_purchase_id'] = purchase_id
        
        await query.edit_message_text(
            "üéÅ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
            "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ @username"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if 'sending_purchase_id' in context.user_data:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞
            await self.process_gift_sending(update, context)
    
    async def process_gift_sending(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞"""
        purchase_id = context.user_data.get('sending_purchase_id')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_id = None
        if update.message.forward_from:
            recipient_id = update.message.forward_from.id
        elif update.message.text and update.message.text.startswith('@'):
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
            return
        
        async with async_session_maker() as session:
            result = await session.execute(
                select(NFTPurchase).where(NFTPurchase.id == purchase_id)
            )
            purchase = result.scalar_one_or_none()
            
            if not purchase:
                await update.message.reply_text("‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É
            purchase.recipient_telegram_id = recipient_id
            purchase.status = "sent"
            purchase.sent_at = datetime.utcnow()
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞
            result = await session.execute(
                select(NFTGift).where(NFTGift.id == purchase.nft_gift_id)
            )
            gift = result.scalar_one_or_none()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            gift_message = (
                f"üéÅ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ NFT –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
                f"–û—Ç: {update.effective_user.first_name}\n"
                f"–ü–æ–¥–∞—Ä–æ–∫: <b>{gift.title}</b>\n"
                f"üîó TX: <code>{purchase.transaction_hash[:16]}...</code>"
            )
            
            if gift.file_id:
                await context.bot.send_animation(
                    chat_id=recipient_id,
                    animation=gift.file_id,
                    caption=gift_message,
                    parse_mode='HTML'
                )
            else:
                await context.bot.send_animation(
                    chat_id=recipient_id,
                    animation=gift.gif_url,
                    caption=gift_message,
                    parse_mode='HTML'
                )
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                f"üéÅ {gift.title}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º."
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del context.user_data['sending_purchase_id']
    
    async def help_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å"""
        query = update.callback_query
        await query.answer()
        
        help_text = (
            "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
            "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>\n\n"
            "1Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ NFT –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –ø–æ–¥–∞—Ä–æ–∫\n"
            "3Ô∏è‚É£ –ö—É–ø–∏—Ç–µ –µ–≥–æ (–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON)\n"
            "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É –≤ Telegram\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/gifts - –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤\n"
            "/my - –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏\n\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support"
        )
        
        keyboard = [[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üéÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∞—Ä–∫–∏", callback_data="view_gifts")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏", callback_data="my_gifts")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    def generate_transaction_hash(self, user_id: int, gift_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è blockchain)"""
        data = f"{user_id}_{gift_id}_{time.time()}".encode()
        return hashlib.sha256(data).hexdigest()
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.view_gifts_callback, pattern="^view_gifts$"))
        self.application.add_handler(CallbackQueryHandler(self.my_gifts_callback, pattern="^my_gifts$"))
        self.application.add_handler(CallbackQueryHandler(self.help_callback, pattern="^help$"))
        self.application.add_handler(CallbackQueryHandler(self.main_menu_callback, pattern="^main_menu$"))
        self.application.add_handler(CallbackQueryHandler(self.navigate_gifts, pattern="^(next_gift|prev_gift)$"))
        self.application.add_handler(CallbackQueryHandler(self.buy_gift, pattern="^buy_"))
        self.application.add_handler(CallbackQueryHandler(self.send_gift_callback, pattern="^send_"))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("NFT Gift Bot –∑–∞–ø—É—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
nft_bot = NFTGiftBot()
